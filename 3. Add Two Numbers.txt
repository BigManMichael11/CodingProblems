//https://leetcode.com/problems/add-two-numbers/description/?envType=study-plan-v2&envId=top-interview-150
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* l1Var = l1;//nodes for reading lists, as to not change the given pointers
        ListNode* l2Var = l2;

        ListNode* ret = new ListNode();//return list
        ListNode* loopNode = ret;//loop list to keep return list pointing at beginning
        
        int tmpVal1 = 0;//temp vals for simplicity
        int tmpVal2 = 0;
        int carry = 0;//carry value between loops

        while(l1Var != NULL || l2Var != NULL || carry != 0){//loop for as long as you get new vals and still have things to carry
            if (l1Var){//updated these vars if they exist
                tmpVal1 = l1Var->val;
                l1Var = l1Var->next;
            } else tmpVal1 = 0;
            if (l2Var){
                tmpVal2 = l2Var->val;
                l2Var = l2Var->next;
            } else tmpVal2 = 0;

            loopNode->val = (tmpVal1 + tmpVal2 + carry) % 10;//set val

            carry = (tmpVal1 + tmpVal2 + carry) > 9 ? 1 : 0;//set carry
            loopNode->next = new ListNode();//update next pointer
            if (l1Var != NULL || l2Var != NULL || carry != 0) loopNode = loopNode->next;//set to next if we have another loop
        }
        loopNode->next = NULL;//remove blank pointer at end

        return ret;
    }
};
