//https://leetcode.com/problems/min-stack/description/
class MinStack {
public:
    MinStack() {
        stack.erase(stack.begin(), stack.end());//clearing vectors
        min_stack.erase(min_stack.begin(), min_stack.end());
    }
    
    void push(int val) {
        //if we don't have a minimum, or this is the minimum, push the min back
        if(min_stack.size() == 0 || val < min_stack.back() ) min_stack.push_back(val);

        //always put our val on the top of stack
        stack.push_back(val);
    }
    
    void pop() {
        //if we are popping a value that matches with our min stack, pop it as well
        if(min_stack.back() == stack.back()) min_stack.pop_back();
        stack.pop_back();
    }
    
    int top() {
        return stack.back();
    }
    
    int getMin() {
        return min_stack.back();
    }
private:
    vector<int> stack;
    vector<int> min_stack;
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
